#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 6.6 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 32 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 65 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 6 #"Menlo\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 0 1 #"\0"
0 -1 1 #"\0"
0 13 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
0 13 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 24 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
15 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
19 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
14 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
17 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
44 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
46 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
          0 1636 0 4 3 85
(
 #";; The first three lines of this file were inserted by DrRacket. The"
 #"y record metadata"
) 0 0 4 29 1 #"\n"
0 0 4 3 85
(
 #";; about the language level of this file in a form that our tools ca"
 #"n easily process."
) 0 0 4 29 1 #"\n"
0 0 4 3 187
(
 #"#reader(lib \"htdp-intermediate-reader.ss\" \"lang\")((modname scree"
 #"nsaver-1) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #("
 #"#t constructor repeating-decimal #f #t none #f () #f)))"
) 0 0 4 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 19 3 12 #"\"extras.rkt\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 8 #"rackunit"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 14 #"2htdp/universe"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 11 #"2htdp/image"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"provide"
0 0 24 3 1 #" "
0 0 14 3 11 #"screensaver"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 14 3 13 #"initial-world"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 14 3 16 #"world-after-tick"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 14 3 21 #"world-after-key-event"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 14 3 11 #"world-circ1"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 14 3 11 #"world-circ2"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 14 3 13 #"world-paused?"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 14 3 10 #"new-circle"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 14 3 6 #"circ-x"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 14 3 6 #"circ-y"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 14 3 7 #"circ-vx"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 14 3 7 #"circ-vy"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;;;"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";; DATA DEFINITIONS"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 24 3 1 #" "
0 0 14 3 8 #"position"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 63
#";; A Position is a (make-postion (NonNegInteger NonNegInteger))"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";; template:"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";; (define (postion-fn pos)"
0 0 24 29 1 #"\n"
0 0 17 3 8 #";;   ..."
0 0 24 29 1 #"\n"
0 0 17 3 21 #";;   (position-x pos)"
0 0 24 29 1 #"\n"
0 0 17 3 22 #";;   (position-y pos))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 24 3 1 #" "
0 0 14 3 8 #"velocity"
0 0 24 3 2 #" ("
0 0 14 3 2 #"vx"
0 0 24 3 1 #" "
0 0 14 3 2 #"vy"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 52 #";; A Velocity is a (make-velocity (Integer Integer))"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";; template:"
0 0 24 29 1 #"\n"
0 0 17 3 26 #";; (define (velocity-fn v)"
0 0 24 29 1 #"\n"
0 0 17 3 8 #";;   ..."
0 0 24 29 1 #"\n"
0 0 17 3 20 #";;   (velocity-vx v)"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";;   (velocity-vy v))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 24 3 1 #" "
0 0 14 3 4 #"circ"
0 0 24 3 2 #" ("
0 0 14 3 3 #"pos"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 45 #";; A Circle is a (make-circ Postion Velocity)"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";; template:"
0 0 24 29 1 #"\n"
0 0 17 3 22 #";; (define (circ-fn c)"
0 0 24 29 1 #"\n"
0 0 17 3 8 #";;   ..."
0 0 24 29 1 #"\n"
0 0 17 3 30 #";;   (postion-fn (circ-pos c))"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";;   (velocity-fn (circ-v c)))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 24 3 1 #" "
0 0 14 3 5 #"world"
0 0 24 3 2 #" ("
0 0 14 3 5 #"circ1"
0 0 24 3 1 #" "
0 0 14 3 5 #"circ2"
0 0 24 3 1 #" "
0 0 14 3 7 #"paused?"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 56 #";; A WorldState is a (make-world Circle Circle Boolean))"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";; template:"
0 0 24 29 1 #"\n"
0 0 17 3 23 #";; (define (world-fn w)"
0 0 24 29 1 #"\n"
0 0 17 3 8 #";;   ..."
0 0 24 29 1 #"\n"
0 0 17 3 32 #";;   (circle-fn (world-circ1 w))"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";;   (circle-fn (world-circ1 w))"
0 0 24 29 1 #"\n"
0 0 17 3 23 #";;   (world-paused? w))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;;;"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";; CONSTANTS"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"RADIUS"
0 0 24 3 1 #" "
0 0 21 3 2 #"40"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 58
#";; Interp: the radius of the two circles will always be 40"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"NORMAL-CIRCLE"
0 0 24 3 2 #" ("
0 0 14 3 6 #"circle"
0 0 24 3 1 #" "
0 0 14 3 6 #"RADIUS"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"outline\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"blue\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 57 #";; Interp: A normal circle should always be outlined blue"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"CANVAS-WIDTH"
0 0 24 3 1 #" "
0 0 21 3 3 #"400"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"CANVAS-HEIGHT"
0 0 24 3 1 #" "
0 0 21 3 3 #"300"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"EMPTY-CANVAS"
0 0 24 3 2 #" ("
0 0 14 3 11 #"empty-scene"
0 0 24 3 1 #" "
0 0 14 3 12 #"CANVAS-WIDTH"
0 0 24 3 1 #" "
0 0 14 3 13 #"CANVAS-HEIGHT"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 52 #";; Interp: the size of the canvas is always 400*300 "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"INIT-CIRCLE1"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-circ"
0 0 24 3 2 #" ("
0 0 14 3 13 #"make-position"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 3 #") ("
0 0 14 3 13 #"make-velocity"
0 0 24 3 1 #" "
0 0 21 3 3 #"-12"
0 0 24 3 1 #" "
0 0 21 3 2 #"20"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"INIT-CIRCLE2"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-circ"
0 0 24 3 2 #" ("
0 0 14 3 13 #"make-position"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 3 #") ("
0 0 14 3 13 #"make-velocity"
0 0 24 3 1 #" "
0 0 21 3 2 #"23"
0 0 24 3 1 #" "
0 0 21 3 3 #"-14"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 17 3 48 #";; Interp: the starting state of the two circles"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"LEFT-BOUND"
0 0 24 3 1 #" "
0 0 14 3 6 #"RADIUS"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"UPPER-BOUND"
0 0 24 3 1 #" "
0 0 14 3 6 #"RADIUS"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"LOWER-BOUND"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 12 #"CANVAS-WIDTH"
0 0 24 3 1 #" "
0 0 14 3 6 #"RADIUS"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"RIGHT-BOUND"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 13 #"CANVAS-HEIGHT"
0 0 24 3 1 #" "
0 0 14 3 6 #"RADIUS"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 58
#";; Interp: the domain of legal x and y values for Position"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;;;"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";; HELPER FUNCTIONS"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 38 #";; format-velocity : Velocity -> Image"
0 0 24 29 1 #"\n"
0 0 17 3 20 #";; GIVEN: a Velocity"
0 0 24 29 1 #"\n"
0 0 17 3 42 #";; RETURNS a Image containing the Velocity"
0 0 24 29 1 #"\n"
0 0 17 3 66
#";; Strategy: use template for Velocity + combine simpler functions"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"format-velocity"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"text"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 19 3 3 #"\"(\""
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 14 #"number->string"
0 0 24 3 2 #" ("
0 0 14 3 11 #"velocity-vx"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 19 3 3 #"\",\""
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 14 #"number->string"
0 0 24 3 2 #" ("
0 0 14 3 11 #"velocity-vy"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 19 3 3 #"\")\""
0 0 24 3 2 #") "
0 0 21 3 2 #"14"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"blue\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 11 #";; example:"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";; (format-velocity ("
0 0 17 3 25 #"circ-v INIT-CIRCLE1)) => "
0 6           4 17 1233
(
 #"(#(struct:overlay #(struct:translate 0 0 #(struct:overlay #(struct:t"
 #"ranslate 0 0 #(struct:overlay #(struct:translate 0 0 #(struct:overla"
 #"y #(struct:translate 0 0 #(struct:overlay #(struct:translate 0 0 #(s"
 #"truct:overlay #(struct:translate 0 0 #(struct:overlay #(struct:trans"
 #"late 0 0 #(struct:translate 2.5 7.0 #(struct:text \"(\" 0 1 \"blue\""
 #" 14 #f swiss normal normal #f))) #(struct:translate 5.0 0.0 #(struct"
 #":translate 2.5 7.0 #(struct:text \"-\" 0 1 \"blue\" 14 #f swiss norm"
 #"al normal #f))))) #(struct:translate 10.0 0.0 #(struct:translate 4.0"
 #" 7.0 #(struct:text \"1\" 0 1 \"blue\" 14 #f swiss normal normal #f))"
 #"))) #(struct:translate 18.0 0.0 #(struct:translate 4.0 7.0 #(struct:"
 #"text \"2\" 0 1 \"blue\" 14 #f swiss normal normal #f))))) #(struct:t"
 #"ranslate 26.0 0.0 #(struct:translate 2.0 7.0 #(struct:text \",\" 0 1"
 #" \"blue\" 14 #f swiss normal normal #f))))) #(struct:translate 30.0 "
 #"0.0 #(struct:translate 4.0 7.0 #(struct:text \"2\" 0 1 \"blue\" 14 #"
 #"f swiss normal normal #f))))) #(struct:translate 38.0 0.0 #(struct:t"
 #"ranslate 4.0 7.0 #(struct:text \"0\" 0 1 \"blue\" 14 #f swiss normal"
 #" normal #f))))) #(struct:translate 46.0 0.0 #(struct:translate 2.5 7"
 #".0 #(struct:text \")\" 0 1 \"blue\" 14 #f swiss normal normal #f))))"
 #" #(struct:bb 51.0 14.0 10.7802734375) #f)"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";; draw-circle : Circle  -> Image"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";; GIVEN: a Circle"
0 0 24 29 1 #"\n"
0 0 17 3 63
#";; RETURNS: a image of the circle with the velocities displayed"
0 0 24 29 1 #"\n"
0 0 17 3 64
#";; Strategy: use template for Circle + combine simpler functions"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"draw-circle"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"overlay"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 14 3 13 #"NORMAL-CIRCLE"
0 0 24 3 2 #" ("
0 0 14 3 15 #"format-velocity"
0 0 24 3 2 #" ("
0 0 14 3 6 #"circ-v"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";; example: "
0 0 24 29 1 #"\n"
0 0 17 3 10 #";; (draw-c"
0 0 17 3 1 #"i"
0 0 17 3 22 #"rcle INIT-CIRCLE1) => "
0 6           4 17 1363
(
 #"(#(struct:overlay #(struct:translate 0 0 #(struct:translate 40 40 #("
 #"struct:ellipse 80 80 0 outline \"blue\"))) #(struct:translate 14.5 3"
 #"3.0 #(struct:overlay #(struct:translate 0 0 #(struct:overlay #(struc"
 #"t:translate 0 0 #(struct:overlay #(struct:translate 0 0 #(struct:ove"
 #"rlay #(struct:translate 0 0 #(struct:overlay #(struct:translate 0 0 "
 #"#(struct:overlay #(struct:translate 0 0 #(struct:overlay #(struct:tr"
 #"anslate 0 0 #(struct:translate 2.5 7.0 #(struct:text \"(\" 0 1 \"blu"
 #"e\" 14 #f swiss normal normal #f))) #(struct:translate 5.0 0.0 #(str"
 #"uct:translate 2.5 7.0 #(struct:text \"-\" 0 1 \"blue\" 14 #f swiss n"
 #"ormal normal #f))))) #(struct:translate 10.0 0.0 #(struct:translate "
 #"4.0 7.0 #(struct:text \"1\" 0 1 \"blue\" 14 #f swiss normal normal #"
 #"f))))) #(struct:translate 18.0 0.0 #(struct:translate 4.0 7.0 #(stru"
 #"ct:text \"2\" 0 1 \"blue\" 14 #f swiss normal normal #f))))) #(struc"
 #"t:translate 26.0 0.0 #(struct:translate 2.0 7.0 #(struct:text \",\" "
 #"0 1 \"blue\" 14 #f swiss normal normal #f))))) #(struct:translate 30"
 #".0 0.0 #(struct:translate 4.0 7.0 #(struct:text \"2\" 0 1 \"blue\" 1"
 #"4 #f swiss normal normal #f))))) #(struct:translate 38.0 0.0 #(struc"
 #"t:translate 4.0 7.0 #(struct:text \"0\" 0 1 \"blue\" 14 #f swiss nor"
 #"mal normal #f))))) #(struct:translate 46.0 0.0 #(struct:translate 2."
 #"5 7.0 #(struct:text \")\" 0 1 \"blue\" 14 #f swiss normal normal #f)"
 #"))))) #(struct:bb 80.0 80.0 80.0) #f)"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 39 #";; world-to-scene : WorldState -> Scene"
0 0 24 29 1 #"\n"
0 0 17 3 49 #";; RETURNS: a Scene that protrays the given world"
0 0 24 29 1 #"\n"
0 0 17 3 40 #";; Strategy: Use tempalte for WorldState"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 3 #"  ("
0 0 14 3 14 #"world-to-scene"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"place-image"
0 0 24 3 2 #" ("
0 0 14 3 11 #"draw-circle"
0 0 24 3 2 #" ("
0 0 14 3 11 #"world-circ1"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 6 #"circ-x"
0 0 24 3 2 #" ("
0 0 14 3 11 #"world-circ1"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 6 #"circ-y"
0 0 24 3 2 #" ("
0 0 14 3 11 #"world-circ1"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 11 #"place-image"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 11 #"draw-circle"
0 0 24 3 2 #" ("
0 0 14 3 11 #"world-circ2"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 6 #"circ-x"
0 0 24 3 2 #" ("
0 0 14 3 11 #"world-circ2"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 6 #"circ-y"
0 0 24 3 2 #" ("
0 0 14 3 11 #"world-circ2"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #")) "
0 0 14 3 12 #"EMPTY-CANVAS"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 39 #";; circle-after-tick : Circle -> Circle"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";; GIVEN: a Circle"
0 0 24 29 1 #"\n"
0 0 17 3 77
(
 #";; RETURNS: the Circle state that should follow the given Circle aft"
 #"er a tick"
) 0 0 24 29 1 #"\n"
0 0 17 3 64
#";; Strategy: use template for Circle + combine simpler functions"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 17 #"circle-after-tick"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 15 #"legalize-circle"
0 0 24 3 2 #" ("
0 0 14 3 23 #"naive-circle-after-tick"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 17 3 11 #";; example:"
0 0 24 29 1 #"\n"
0 0 17 3 3 #";; "
0 0 17 3 1 #"("
0 0 17 3 17 #"circle-after-tick"
0 0 17 3 2 #" ("
0 0 17 3 10 #"new-circle"
0 0 17 3 1 #" "
0 0 17 3 43 #"45 80 -15 20)) => (new-circle 40 100 15 20)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 73
(
 #";; naive-circle-after-tick : Circle -> Circle (might be a illegal ci"
 #"rcle)"
) 0 0 24 29 1 #"\n"
0 0 17 3 18 #";; GIVEN: a Circle"
0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #";; RETURNS: a naive Circle with its velocity added to its coordinate"
 #"s"
) 0 0 24 29 1 #"\n"
0 0 17 3 68
#";;          regardless of whether the circle stays inside the walls."
0 0 24 29 1 #"\n"
0 0 17 3 62
#";;          result should be legalized through legalize-circle"
0 0 24 29 1 #"\n"
0 0 17 3 64
#";; Strategy: use tempalte for Circle + combine simpler functions"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 23 #"naive-circle-after-tick"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 10 #"new-circle"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 6 #"circ-x"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 3 #") ("
0 0 14 3 7 #"circ-vx"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 6 #"circ-y"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 3 #") ("
0 0 14 3 7 #"circ-vy"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 7 #"circ-vx"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 7 #"circ-vy"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 17 3 11 #";; example:"
0 0 24 29 1 #"\n"
0 0 17 3 78
(
 #";; (naive-circle-after-tick (new-circle 10 15 -4 8)) => (new-circle "
 #"6 23 -4 8)"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";; legalize-circle : Circle -> Circle"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";; GIVEN: a naive Circle"
0 0 24 29 1 #"\n"
0 0 17 3 81
(
 #";; RETURNS: a legalized circle that stays inside the walls and corre"
 #"cted velocity"
) 0 0 24 29 1 #"\n"
0 0 17 3 44 #";; Strategy: case on which wall is being hit"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"legalize-circle"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 2 #"<="
0 0 24 3 2 #" ("
0 0 14 3 6 #"circ-x"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 2 #") "
0 0 14 3 10 #"LEFT-BOUND"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 10 #"new-circle"
0 0 24 3 1 #" "
0 0 14 3 10 #"LEFT-BOUND"
0 0 24 3 2 #" ("
0 0 14 3 6 #"circ-y"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 3 #") ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 7 #"circ-vx"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"circ-vy"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 2 #"<="
0 0 24 3 2 #" ("
0 0 14 3 6 #"circ-y"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 2 #") "
0 0 14 3 11 #"UPPER-BOUND"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 10 #"new-circle"
0 0 24 3 2 #" ("
0 0 14 3 6 #"circ-x"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 2 #") "
0 0 14 3 11 #"UPPER-BOUND"
0 0 24 3 2 #" ("
0 0 14 3 7 #"circ-vx"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 3 #") ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 7 #"circ-vy"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 2 #">="
0 0 24 3 2 #" ("
0 0 14 3 6 #"circ-x"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 2 #") "
0 0 14 3 11 #"LOWER-BOUND"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 10 #"new-circle"
0 0 24 3 1 #" "
0 0 14 3 11 #"LOWER-BOUND"
0 0 24 3 2 #" ("
0 0 14 3 6 #"circ-y"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 3 #") ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 7 #"circ-vx"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"circ-vy"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 2 #">="
0 0 24 3 2 #" ("
0 0 14 3 6 #"circ-y"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 2 #") "
0 0 14 3 11 #"RIGHT-BOUND"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 10 #"new-circle"
0 0 24 3 2 #" ("
0 0 14 3 6 #"circ-x"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 2 #") "
0 0 14 3 11 #"RIGHT-BOUND"
0 0 24 3 2 #" ("
0 0 14 3 7 #"circ-vx"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 3 #") ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 7 #"circ-vy"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 3 #"]))"
0 0 24 29 1 #"\n"
0 0 17 3 11 #";; example:"
0 0 24 29 1 #"\n"
0 0 17 3 74
(
 #";; (legalize-circle (new-circle 30 123 -14 8)) => (new-circle 40 123"
 #" 14 8)"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;;;"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";; DELIVERABLE FUNCTIONS"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 38 #";; screensaver : PosReal -> WorldState"
0 0 24 29 1 #"\n"
0 0 17 3 54 #";; GIVEN: the speed of the simulation, in seconds/tick"
0 0 24 29 1 #"\n"
0 0 17 3 66
#";; EFFECT: runs the simulation, starting with the initial state as"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";; specified in the problem set."
0 0 24 29 1 #"\n"
0 0 17 3 40 #";; RETURNS: the final state of the world"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"screensaver"
0 0 24 3 1 #" "
0 0 14 3 5 #"speed"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 8 #"big-bang"
0 0 24 3 1 #" "
0 0 14 3 13 #"initial-world"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 7 #"on-tick"
0 0 24 3 1 #" "
0 0 14 3 16 #"world-after-tick"
0 0 24 3 1 #" "
0 0 14 3 5 #"speed"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 6 #"on-key"
0 0 24 3 1 #" "
0 0 14 3 21 #"world-after-key-event"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 7 #"on-draw"
0 0 24 3 1 #" "
0 0 14 3 14 #"world-to-scene"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 36 #";; initial-world : Any -> WorldState"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";; GIVEN: any value (ignored)"
0 0 24 29 1 #"\n"
0 0 17 3 58
#";; RETURNS: the initial world specified in the problem set"
0 0 24 29 1 #"\n"
0 0 17 3 46 #";; Strategy: Use data definition of WorldState"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"initial-world"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-world"
0 0 24 3 1 #" "
0 0 14 3 12 #"INIT-CIRCLE1"
0 0 24 3 1 #" "
0 0 14 3 12 #"INIT-CIRCLE2"
0 0 24 3 1 #" "
0 0 14 3 4 #"true"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 46 #";; world-after-tick : WorldState -> WorldState"
0 0 24 29 1 #"\n"
0 0 17 3 68
#";; RETURNS: the world state that should follow the given world state"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";; after a tick."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 16 #"world-after-tick"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 13 #"world-paused?"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 10 #"make-world"
0 0 24 3 2 #" ("
0 0 14 3 17 #"circle-after-tick"
0 0 24 3 2 #" ("
0 0 14 3 11 #"world-circ1"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 17 #"circle-after-tick"
0 0 24 3 2 #" ("
0 0 14 3 11 #"world-circ2"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 13 #"world-paused?"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #")) "
0 0 14 3 1 #"w"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 60
#";; world-after-key-event : WorldState KeyEvent -> WorldState"
0 0 24 29 1 #"\n"
0 0 17 3 66
#";; RETURNS: the WorldState that should follow the given worldstate"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";; after the given keyevent"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 21 #"world-after-key-event"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #" "
0 0 14 3 3 #"key"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"key=?"
0 0 24 3 1 #" "
0 0 14 3 3 #"key"
0 0 24 3 1 #" "
0 0 19 3 3 #"\" \""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 10 #"make-world"
0 0 24 3 2 #" ("
0 0 14 3 11 #"world-circ1"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 11 #"world-circ2"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 13 #"world-paused?"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 1 #"w"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 11 #";; example\""
0 0 24 29 1 #"\n"
0 0 17 3 44 #";; (world-after-key-event initial-world \" \")"
0 0 24 29 1 #"\n"
0 0 17 3 50 #";; => (make-world INIT-CIRCLE1 INIT-CIRCLE2 false)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";; world-circ1 : WorldState -> Circle"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";; world-circ2 : WorldState -> Circle"
0 0 24 29 1 #"\n"
0 0 17 3 40 #";; world-paused? : WorldState -> Boolean"
0 0 24 29 1 #"\n"
0 0 17 3 53 #";; RETURNS: the specified attribute of the WorldState"
0 0 24 29 1 #"\n"
0 0 17 3 65
#";; NOTE: if these are part of the world struct, you don't need to"
0 0 24 29 1 #"\n"
0 0 17 3 46 #";; write any deliverables for these functions."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 53 #";; new-circle : NonNegInt NonNegInt Int Int -> Circle"
0 0 24 29 1 #"\n"
0 0 17 3 67
#";; GIVEN: 2 non-negative integers x and y, and 2 integers vx and vy"
0 0 24 29 1 #"\n"
0 0 17 3 62
#";; RETURNS: a circle centered at (x,y), which will travel with"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";; velocity (vx, vy)."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"new-circle"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 2 #"vx"
0 0 24 3 1 #" "
0 0 14 3 2 #"vy"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"make-circ"
0 0 24 3 2 #" ("
0 0 14 3 13 #"make-position"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #") ("
0 0 14 3 13 #"make-velocity"
0 0 24 3 1 #" "
0 0 14 3 2 #"vx"
0 0 24 3 1 #" "
0 0 14 3 2 #"vy"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 17 3 11 #";; example:"
0 0 24 29 1 #"\n"
0 0 17 3 46 #";; (new-circle 200 100 -12 20) => INIT-CIRCLE1"
0 0 24 29 1 #"\n"
0 0 17 3 46 #";; (new-circle 200 200 23 -14) => INIT-CIRCLE2"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";; circ-x : Circle -> NonNegInt"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";; circ-y : Circle -> NonNegInt"
0 0 24 29 1 #"\n"
0 0 17 3 26 #";; circ-vx : Circle -> Int"
0 0 24 29 1 #"\n"
0 0 17 3 26 #";; circ-vy : Circle -> Int"
0 0 24 29 1 #"\n"
0 0 17 3 63
#";; RETURNS: the coordinates of the center of the circle and its"
0 0 24 29 1 #"\n"
0 0 17 3 49 #";;          velocity in the x- and y- directions."
0 0 24 29 1 #"\n"
0 0 17 3 59
#";; Strategy: use template for Position, Velocity and Circle"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"circ-x"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 3 #") ("
0 0 14 3 10 #"position-x"
0 0 24 3 2 #" ("
0 0 14 3 8 #"circ-pos"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 17 3 40 #";; example: (circ-x INIT-CIRCLE1) => 200"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"circ-y"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 3 #") ("
0 0 14 3 10 #"position-y"
0 0 24 3 2 #" ("
0 0 14 3 8 #"circ-pos"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 17 3 40 #";; example: (circ-y INIT-CIRCLE1) => 100"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"circ-vx"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 3 #") ("
0 0 14 3 11 #"velocity-vx"
0 0 24 3 2 #" ("
0 0 14 3 6 #"circ-v"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 17 3 41 #";; example: (circ-vx INIT-CIRCLE1) => -12"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"circ-vy"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 3 #") ("
0 0 14 3 11 #"velocity-vy"
0 0 24 3 2 #" ("
0 0 14 3 6 #"circ-v"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 17 3 40 #";; example: (circ-vy INIT-CIRCLE1) => 20"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;;;"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";(screensaver 0.5)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 14 #"begin-for-test"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 24 3 2 #" ("
0 0 14 3 6 #"circ-x"
0 0 24 3 2 #" ("
0 0 14 3 10 #"new-circle"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 3 #")) "
0 0 21 3 1 #"1"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 19 3 45 #"\"circ-x should return the x coordinate value\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 24 3 2 #" ("
0 0 14 3 6 #"circ-y"
0 0 24 3 2 #" ("
0 0 14 3 10 #"new-circle"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 3 #")) "
0 0 21 3 1 #"2"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 19 3 45 #"\"circ-y should return the y coordinate value\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 24 3 2 #" ("
0 0 14 3 7 #"circ-vx"
0 0 24 3 2 #" ("
0 0 14 3 10 #"new-circle"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 3 #")) "
0 0 21 3 1 #"3"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 19 3 44 #"\"circ-vx should return the x volecity value\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 24 3 2 #" ("
0 0 14 3 7 #"circ-vy"
0 0 24 3 2 #" ("
0 0 14 3 10 #"new-circle"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 3 #")) "
0 0 21 3 1 #"4"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 19 3 44 #"\"circ-vy should return the y volecity value\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 24 3 2 #" ("
0 0 14 3 10 #"new-circle"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 21 3 3 #"-12"
0 0 24 3 1 #" "
0 0 21 3 2 #"20"
0 0 24 3 2 #") "
0 0 14 3 12 #"INIT-CIRCLE1"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 19 3 64
#"\"new-circle should return INIT-CIRCLE when given initial values\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 24 3 2 #" ("
0 0 14 3 10 #"new-circle"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 1 #" "
0 0 21 3 2 #"23"
0 0 24 3 1 #" "
0 0 21 3 3 #"-14"
0 0 24 3 2 #") "
0 0 14 3 12 #"INIT-CIRCLE2"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 19 3 64
#"\"new-circle should return INIT-CIRCLE when given initial values\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 24 3 2 #" ("
0 0 14 3 6 #"circ-x"
0 0 24 3 1 #" "
0 0 14 3 12 #"INIT-CIRCLE1"
0 0 24 3 2 #") "
0 0 21 3 3 #"200"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 19 3 69
(
 #"\"circ-x should return initial value of x coordinate for INIT-CIRCLE"
 #"1\""
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 24 3 2 #" ("
0 0 14 3 6 #"circ-y"
0 0 24 3 1 #" "
0 0 14 3 12 #"INIT-CIRCLE1"
0 0 24 3 2 #") "
0 0 21 3 3 #"100"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 19 3 69
(
 #"\"circ-y should return initial value of x coordinate for INIT-CIRCLE"
 #"1\""
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 24 3 2 #" ("
0 0 14 3 7 #"circ-vx"
0 0 24 3 1 #" "
0 0 14 3 12 #"INIT-CIRCLE1"
0 0 24 3 2 #") "
0 0 21 3 3 #"-12"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 19 3 70
(
 #"\"circ-vx should return initial value of x coordinate for INIT-CIRCL"
 #"E1\""
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 24 3 2 #" ("
0 0 14 3 7 #"circ-vy"
0 0 24 3 1 #" "
0 0 14 3 12 #"INIT-CIRCLE1"
0 0 24 3 2 #") "
0 0 21 3 2 #"20"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 19 3 70
(
 #"\"circ-vy should return initial value of x coordinate for INIT-CIRCL"
 #"E1\""
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 24 3 2 #" ("
0 0 14 3 21 #"world-after-key-event"
0 0 24 3 1 #" "
0 0 14 3 13 #"initial-world"
0 0 24 3 1 #" "
0 0 19 3 3 #"\" \""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 10 #"make-world"
0 0 24 3 1 #" "
0 0 14 3 12 #"INIT-CIRCLE1"
0 0 24 3 1 #" "
0 0 14 3 12 #"INIT-CIRCLE2"
0 0 24 3 1 #" "
0 0 14 3 5 #"false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 19 3 44 #"\"space bar should unpause the initial world\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 24 3 2 #" ("
0 0 14 3 21 #"world-after-key-event"
0 0 24 3 1 #" "
0 0 14 3 13 #"initial-world"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"b\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 10 #"make-world"
0 0 24 3 1 #" "
0 0 14 3 12 #"INIT-CIRCLE1"
0 0 24 3 1 #" "
0 0 14 3 12 #"INIT-CIRCLE2"
0 0 24 3 1 #" "
0 0 14 3 4 #"true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 19 3 64
#"\"keys other than space bar should not unpause the initial world\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 24 3 2 #" ("
0 0 14 3 17 #"circle-after-tick"
0 0 24 3 2 #" ("
0 0 14 3 10 #"new-circle"
0 0 24 3 1 #" "
0 0 21 3 2 #"45"
0 0 24 3 1 #" "
0 0 21 3 2 #"80"
0 0 24 3 1 #" "
0 0 21 3 3 #"-15"
0 0 24 3 1 #" "
0 0 21 3 2 #"20"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 10 #"new-circle"
0 0 24 3 1 #" "
0 0 21 3 2 #"40"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 21 3 2 #"15"
0 0 24 3 1 #" "
0 0 21 3 2 #"20"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 19 3 66
#"\"circle should bounce smoothly in the Professor Clinger's example\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 24 3 2 #" ("
0 0 14 3 23 #"naive-circle-after-tick"
0 0 24 3 2 #" ("
0 0 14 3 10 #"new-circle"
0 0 24 3 1 #" "
0 0 21 3 3 #"110"
0 0 24 3 1 #" "
0 0 21 3 3 #"115"
0 0 24 3 1 #" "
0 0 21 3 2 #"-4"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 10 #"new-circle"
0 0 24 3 1 #" "
0 0 21 3 3 #"106"
0 0 24 3 1 #" "
0 0 21 3 3 #"123"
0 0 24 3 1 #" "
0 0 21 3 2 #"-4"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 19 3 70
(
 #"\"naive-circle-after-tick should move the circle according to veloci"
 #"ty\""
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 24 3 2 #" ("
0 0 14 3 23 #"naive-circle-after-tick"
0 0 24 3 2 #" ("
0 0 14 3 10 #"new-circle"
0 0 24 3 1 #" "
0 0 21 3 2 #"44"
0 0 24 3 1 #" "
0 0 21 3 3 #"115"
0 0 24 3 1 #" "
0 0 21 3 3 #"-14"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 10 #"new-circle"
0 0 24 3 1 #" "
0 0 21 3 2 #"30"
0 0 24 3 1 #" "
0 0 21 3 3 #"123"
0 0 24 3 1 #" "
0 0 21 3 3 #"-14"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 19 3 66
#"\"naive-circle-after-tick should move the circle outside the walls\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 24 3 2 #" ("
0 0 14 3 15 #"legalize-circle"
0 0 24 3 2 #" ("
0 0 14 3 10 #"new-circle"
0 0 24 3 1 #" "
0 0 21 3 2 #"30"
0 0 24 3 1 #" "
0 0 21 3 3 #"123"
0 0 24 3 1 #" "
0 0 21 3 3 #"-14"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 10 #"new-circle"
0 0 24 3 1 #" "
0 0 21 3 2 #"40"
0 0 24 3 1 #" "
0 0 21 3 3 #"123"
0 0 24 3 1 #" "
0 0 21 3 2 #"14"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 19 3 60
#"\"legalize-circle should move the cirle inside the left wall\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 24 3 2 #" ("
0 0 14 3 15 #"legalize-circle"
0 0 24 3 2 #" ("
0 0 14 3 10 #"new-circle"
0 0 24 3 1 #" "
0 0 21 3 3 #"130"
0 0 24 3 1 #" "
0 0 21 3 2 #"23"
0 0 24 3 1 #" "
0 0 21 3 2 #"14"
0 0 24 3 1 #" "
0 0 21 3 2 #"-8"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 10 #"new-circle"
0 0 24 3 1 #" "
0 0 21 3 3 #"130"
0 0 24 3 1 #" "
0 0 21 3 2 #"40"
0 0 24 3 1 #" "
0 0 21 3 2 #"14"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 19 3 61
#"\"legalize-circle should move the cirle inside the upper wall\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 24 3 2 #" ("
0 0 14 3 15 #"legalize-circle"
0 0 24 3 2 #" ("
0 0 14 3 10 #"new-circle"
0 0 24 3 1 #" "
0 0 21 3 3 #"380"
0 0 24 3 1 #" "
0 0 21 3 3 #"123"
0 0 24 3 1 #" "
0 0 21 3 2 #"14"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 10 #"new-circle"
0 0 24 3 1 #" "
0 0 21 3 3 #"360"
0 0 24 3 1 #" "
0 0 21 3 3 #"123"
0 0 24 3 1 #" "
0 0 21 3 3 #"-14"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 19 3 61
#"\"legalize-circle should move the cirle inside the right wall\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 24 3 2 #" ("
0 0 14 3 15 #"legalize-circle"
0 0 24 3 2 #" ("
0 0 14 3 10 #"new-circle"
0 0 24 3 1 #" "
0 0 21 3 3 #"130"
0 0 24 3 1 #" "
0 0 21 3 3 #"264"
0 0 24 3 1 #" "
0 0 21 3 2 #"14"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 10 #"new-circle"
0 0 24 3 1 #" "
0 0 21 3 3 #"130"
0 0 24 3 1 #" "
0 0 21 3 3 #"260"
0 0 24 3 1 #" "
0 0 21 3 2 #"14"
0 0 24 3 1 #" "
0 0 21 3 2 #"-8"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 19 3 61
#"\"legalize-circle should move the cirle inside the lower wall\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 24 3 2 #" ("
0 0 14 3 15 #"legalize-circle"
0 0 24 3 1 #" "
0 0 14 3 12 #"INIT-CIRCLE1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 14 3 12 #"INIT-CIRCLE1"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 19 3 50 #"\"legalize-circle should not change a legal circle\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 24 3 2 #" ("
0 0 14 3 15 #"format-velocity"
0 0 24 3 2 #" ("
0 0 14 3 6 #"circ-v"
0 0 24 3 1 #" "
0 0 14 3 12 #"INIT-CIRCLE1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 6           4 62 1233
(
 #"(#(struct:overlay #(struct:translate 0 0 #(struct:overlay #(struct:t"
 #"ranslate 0 0 #(struct:overlay #(struct:translate 0 0 #(struct:overla"
 #"y #(struct:translate 0 0 #(struct:overlay #(struct:translate 0 0 #(s"
 #"truct:overlay #(struct:translate 0 0 #(struct:overlay #(struct:trans"
 #"late 0 0 #(struct:translate 2.5 7.0 #(struct:text \"(\" 0 1 \"blue\""
 #" 14 #f swiss normal normal #f))) #(struct:translate 5.0 0.0 #(struct"
 #":translate 2.5 7.0 #(struct:text \"-\" 0 1 \"blue\" 14 #f swiss norm"
 #"al normal #f))))) #(struct:translate 10.0 0.0 #(struct:translate 4.0"
 #" 7.0 #(struct:text \"1\" 0 1 \"blue\" 14 #f swiss normal normal #f))"
 #"))) #(struct:translate 18.0 0.0 #(struct:translate 4.0 7.0 #(struct:"
 #"text \"2\" 0 1 \"blue\" 14 #f swiss normal normal #f))))) #(struct:t"
 #"ranslate 26.0 0.0 #(struct:translate 2.0 7.0 #(struct:text \",\" 0 1"
 #" \"blue\" 14 #f swiss normal normal #f))))) #(struct:translate 30.0 "
 #"0.0 #(struct:translate 4.0 7.0 #(struct:text \"2\" 0 1 \"blue\" 14 #"
 #"f swiss normal normal #f))))) #(struct:translate 38.0 0.0 #(struct:t"
 #"ranslate 4.0 7.0 #(struct:text \"0\" 0 1 \"blue\" 14 #f swiss normal"
 #" normal #f))))) #(struct:translate 46.0 0.0 #(struct:translate 2.5 7"
 #".0 #(struct:text \")\" 0 1 \"blue\" 14 #f swiss normal normal #f))))"
 #" #(struct:bb 51.0 14.0 10.7802734375) #f)"
) 0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 19 3 51 #"\"format-velocity should return velocity as a image\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 24 3 2 #" ("
0 0 14 3 11 #"draw-circle"
0 0 24 3 1 #" "
0 0 14 3 12 #"INIT-CIRCLE1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 6           4 62 1363
(
 #"(#(struct:overlay #(struct:translate 0 0 #(struct:translate 40 40 #("
 #"struct:ellipse 80 80 0 outline \"blue\"))) #(struct:translate 14.5 3"
 #"3.0 #(struct:overlay #(struct:translate 0 0 #(struct:overlay #(struc"
 #"t:translate 0 0 #(struct:overlay #(struct:translate 0 0 #(struct:ove"
 #"rlay #(struct:translate 0 0 #(struct:overlay #(struct:translate 0 0 "
 #"#(struct:overlay #(struct:translate 0 0 #(struct:overlay #(struct:tr"
 #"anslate 0 0 #(struct:translate 2.5 7.0 #(struct:text \"(\" 0 1 \"blu"
 #"e\" 14 #f swiss normal normal #f))) #(struct:translate 5.0 0.0 #(str"
 #"uct:translate 2.5 7.0 #(struct:text \"-\" 0 1 \"blue\" 14 #f swiss n"
 #"ormal normal #f))))) #(struct:translate 10.0 0.0 #(struct:translate "
 #"4.0 7.0 #(struct:text \"1\" 0 1 \"blue\" 14 #f swiss normal normal #"
 #"f))))) #(struct:translate 18.0 0.0 #(struct:translate 4.0 7.0 #(stru"
 #"ct:text \"2\" 0 1 \"blue\" 14 #f swiss normal normal #f))))) #(struc"
 #"t:translate 26.0 0.0 #(struct:translate 2.0 7.0 #(struct:text \",\" "
 #"0 1 \"blue\" 14 #f swiss normal normal #f))))) #(struct:translate 30"
 #".0 0.0 #(struct:translate 4.0 7.0 #(struct:text \"2\" 0 1 \"blue\" 1"
 #"4 #f swiss normal normal #f))))) #(struct:translate 38.0 0.0 #(struc"
 #"t:translate 4.0 7.0 #(struct:text \"0\" 0 1 \"blue\" 14 #f swiss nor"
 #"mal normal #f))))) #(struct:translate 46.0 0.0 #(struct:translate 2."
 #"5 7.0 #(struct:text \")\" 0 1 \"blue\" 14 #f swiss normal normal #f)"
 #"))))) #(struct:bb 80.0 80.0 80.0) #f)"
) 0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 19 3 47 #"\"draw-circle should darw the cirlce as a image\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 24 3 2 #" ("
0 0 14 3 14 #"world-to-scene"
0 0 24 3 2 #" ("
0 0 14 3 16 #"world-after-tick"
0 0 24 3 1 #" "
0 0 14 3 13 #"initial-world"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 14 #"world-to-scene"
0 0 24 3 1 #" "
0 0 14 3 13 #"initial-world"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 19 3 58
#"\"initial-world should remain still when without key event\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 24 3 2 #" ("
0 0 14 3 16 #"world-after-tick"
0 0 24 3 2 #" ("
0 0 14 3 21 #"world-after-key-event"
0 0 24 3 1 #" "
0 0 14 3 13 #"initial-world"
0 0 24 3 1 #" "
0 0 19 3 3 #"\" \""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 10 #"make-world"
0 0 24 3 2 #" ("
0 0 14 3 10 #"new-circle"
0 0 24 3 1 #" "
0 0 21 3 3 #"188"
0 0 24 3 1 #" "
0 0 21 3 3 #"120"
0 0 24 3 1 #" "
0 0 21 3 3 #"-12"
0 0 24 3 1 #" "
0 0 21 3 2 #"20"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ("
0 0 14 3 10 #"new-circle"
0 0 24 3 1 #" "
0 0 21 3 3 #"223"
0 0 24 3 1 #" "
0 0 21 3 3 #"186"
0 0 24 3 1 #" "
0 0 21 3 2 #"23"
0 0 24 3 1 #" "
0 0 21 3 3 #"-14"
0 0 24 3 2 #") "
0 0 14 3 5 #"false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 19 3 66
#"\"the circle should move accordingly to the velocity when unpaused\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 1 #")"
0           0
